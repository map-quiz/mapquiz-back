import { FastifyInstance } from "fastify";
import WebSocket from "ws";
import { build } from "../../../src/server.js";
import { testUtils } from "../../setup.js";

/**
 * Tests WebSocket Connection Handler - Tests Unitaires Focalis√©s
 *
 * Tests cibl√©s sur la logique m√©tier sp√©cifique du gestionnaire de connexions
 * avec un minimum de mocks pour valider le comportement r√©el.
 */
describe("WebSocket Connection Handler - Logic Tests", () => {
  let app: FastifyInstance;
  let server: any;
  let testUser1: any;
  let testUser2: any;

  beforeAll(async () => {
    app = await build();
    await app.listen({ port: 0, host: "localhost" });
    server = app.server;
  });

  afterAll(async () => {
    if (app) {
      await app.close();
    }
  });

  beforeEach(async () => {
    await testUtils.cleanDatabase();
    testUser1 = await testUtils.createTestUser(
      "conn-user-1",
      "Connection User 1"
    );
    testUser2 = await testUtils.createTestUser(
      "conn-user-2",
      "Connection User 2"
    );
  });

  describe("üîÑ Logique de Restauration d'√âtat", () => {
    it("devrait filtrer les lobbies par statut lors de la restauration", async () => {
      // ‚úÖ Test de logique m√©tier critique sans mocks excessifs

      // 1. Cr√©er lobbies avec diff√©rents statuts
      const waitingLobby = await testUtils.createTestLobby(
        "waiting-lobby",
        testUser1.id,
        { selectedRegions: ["Europe"], gameMode: "quiz" }
      );

      const playingLobby = await testUtils.createTestLobby(
        "playing-lobby",
        testUser1.id,
        { selectedRegions: ["Asia"], gameMode: "quiz" }
      );

      const finishedLobby = await testUtils.createTestLobby(
        "finished-lobby",
        testUser1.id,
        { selectedRegions: ["Africa"], gameMode: "quiz" }
      );

      // D√©finir les statuts
      await testUtils.updateLobbyStatus(playingLobby.id, "playing");
      await testUtils.updateLobbyStatus(finishedLobby.id, "finished");

      // 2. Connexion WebSocket
      const ws = new WebSocket(`ws://localhost:${server.address().port}/ws`, {
        headers: { "x-user-id": testUser1.id },
      });

      try {
        await new Promise<void>((resolve, reject) => {
          let waitingLobbyRestored = false;
          let playingLobbyNotRestored = true;
          let finishedLobbyNotRestored = true;

          ws.on("message", (data) => {
            const response = JSON.parse(data.toString());

            if (response.type === "lobby_updated") {
              const lobbyId = response.data.lobbyId;

              if (lobbyId === waitingLobby.id) {
                waitingLobbyRestored = true;
                // ‚úÖ Validation : lobby en attente restaur√©
                expect(response.data.status).toBe("waiting");
              }

              if (lobbyId === playingLobby.id) {
                playingLobbyNotRestored = false;
                // ‚ùå Lobby en cours ne devrait pas √™tre restaur√©
              }

              if (lobbyId === finishedLobby.id) {
                finishedLobbyNotRestored = false;
                // ‚ùå Lobby termin√© ne devrait pas √™tre restaur√©
              }
            }

            // V√©rifier conditions de succ√®s
            if (
              waitingLobbyRestored &&
              playingLobbyNotRestored &&
              finishedLobbyNotRestored
            ) {
              resolve();
            }
          });

          ws.on("error", reject);

          // R√©solution apr√®s d√©lai si seuls les bons lobbies sont restaur√©s
          setTimeout(() => {
            if (
              waitingLobbyRestored &&
              playingLobbyNotRestored &&
              finishedLobbyNotRestored
            ) {
              resolve();
            } else {
              reject(
                new Error(
                  `Filtrage √©chou√©: waiting=${waitingLobbyRestored}, playing=${!playingLobbyNotRestored}, finished=${!finishedLobbyNotRestored}`
                )
              );
            }
          }, 3000);
        });
      } finally {
        ws.close();
      }
    });

    it("devrait pr√©venir la restauration multiple du m√™me utilisateur", async () => {
      // ‚úÖ Test de cache utilisateur sans mocks

      const testLobby = await testUtils.createTestLobby(
        "cache-test-lobby",
        testUser1.id
      );

      // 1. Premi√®re connexion
      const ws1 = new WebSocket(`ws://localhost:${server.address().port}/ws`, {
        headers: { "x-user-id": testUser1.id },
      });

      let firstRestoration = false;

      await new Promise<void>((resolve, reject) => {
        ws1.on("message", (data) => {
          const response = JSON.parse(data.toString());
          if (
            response.type === "lobby_updated" &&
            response.data.lobbyId === testLobby.id
          ) {
            firstRestoration = true;
            resolve();
          }
        });

        ws1.on("error", reject);
        setTimeout(() => reject(new Error("Timeout premi√®re connexion")), 3000);
      });

      expect(firstRestoration).toBe(true);

      // 2. Deuxi√®me connexion imm√©diate (double connexion)
      const ws2 = new WebSocket(`ws://localhost:${server.address().port}/ws`, {
        headers: { "x-user-id": testUser1.id },
      });

      let secondRestoration = false;

      try {
        await new Promise<void>((resolve, reject) => {
          ws2.on("message", (data) => {
            const response = JSON.parse(data.toString());
            if (
              response.type === "lobby_updated" &&
              response.data.lobbyId === testLobby.id
            ) {
              secondRestoration = true;
            }
          });

          ws2.on("error", reject);

          // Attendre et v√©rifier qu'il n'y a pas de deuxi√®me restauration
          setTimeout(() => {
            resolve(); // R√©soudre m√™me sans restoration (comportement attendu)
          }, 2000);
        });

        // ‚úÖ Validation : pas de double restauration
        expect(secondRestoration).toBe(false);
      } finally {
        ws1.close();
        ws2.close();
      }
    });
  });

  describe("‚ö° Gestion des Erreurs de Connexion", () => {
    it("devrait √™tre r√©silient aux erreurs de base de donn√©es", async () => {
      // ‚úÖ Test de r√©silience r√©elle (pas de mocks BD factices)

      // Tentative de connexion avec un utilisateur inexistant
      const ws = new WebSocket(`ws://localhost:${server.address().port}/ws`, {
        headers: { "x-user-id": "user-inexistant-12345" },
      });

      try {
        await new Promise<void>((resolve, reject) => {
          let authenticatedReceived = false;
          let errorReceived = false;

          ws.on("message", (data) => {
            const response = JSON.parse(data.toString());

            if (response.type === "authenticated") {
              authenticatedReceived = true;
              // ‚úÖ Validation : authentification continue malgr√© erreurs
              expect(response.data.userId).toBe("user-inexistant-12345");
            }

            if (response.type === "error") {
              errorReceived = true;
              // Des erreurs peuvent appara√Ætre mais ne doivent pas faire crasher
            }
          });

          ws.on("error", (error) => {
            // Les erreurs de connexion sont g√©r√©es gracieusement
            resolve();
          });

          // R√©solution si authentification r√©ussie
          setTimeout(() => {
            if (authenticatedReceived || errorReceived) {
              resolve();
            } else {
              reject(new Error("Pas de r√©ponse du serveur"));
            }
          }, 3000);
        });
      } finally {
        ws.close();
      }
    });

    it("devrait g√©rer les connexions courtes sans fuites m√©moire", async () => {
      // ‚úÖ Test de robustesse sans mocks

      const connectionPromises = [];

      // Cr√©er plusieurs connexions courtes en parall√®le
      for (let i = 0; i < 5; i++) {
        const connectionPromise = new Promise<void>(async (resolve, reject) => {
          const ws = new WebSocket(
            `ws://localhost:${server.address().port}/ws`,
            {
              headers: { "x-user-id": `short-conn-${i}` },
            }
          );

          let connected = false;

          ws.on("open", () => {
            connected = true;
            // Fermer imm√©diatement
            setTimeout(() => {
              ws.close();
            }, 100);
          });

          ws.on("close", () => {
            if (connected) {
              resolve();
            }
          });

          ws.on("error", () => {
            resolve(); // Accepter les erreurs de connexion courte
          });

          // Timeout de s√©curit√©
          setTimeout(() => resolve(), 2000);
        });

        connectionPromises.push(connectionPromise);
      }

      // ‚úÖ Validation : toutes les connexions courtes trait√©es sans crash
      await Promise.all(connectionPromises);

      // Pause pour laisser le nettoyage se faire
      await new Promise((resolve) => setTimeout(resolve, 1000));

      // Validation que le serveur est toujours op√©rationnel
      const finalWs = new WebSocket(
        `ws://localhost:${server.address().port}/ws`,
        {
          headers: { "x-user-id": testUser1.id },
        }
      );

      await new Promise<void>((resolve, reject) => {
        finalWs.on("open", () => resolve());
        finalWs.on("error", reject);
        setTimeout(
          () =>
            reject(new Error("Serveur non-r√©pondant apr√®s connexions courtes")),
          3000
        );
      });

      finalWs.close();
    });
  });

  describe("üéØ Validation de Logique M√©tier Sp√©cifique", () => {
    it("devrait traiter les d√©connexions seulement pour les lobbies appropri√©s", async () => {
      // ‚úÖ Test de logique m√©tier critique de d√©connexion

      // 1. Cr√©er lobbies avec statuts diff√©rents et ajouter le joueur
      const waitingLobby = await testUtils.createTestLobby(
        "waiting-disconnect-test",
        testUser1.id
      );
      await testUtils.addPlayerToLobby(waitingLobby.id, testUser2.id);

      const playingLobby = await testUtils.createTestLobby(
        "playing-disconnect-test",
        testUser1.id
      );
      await testUtils.addPlayerToLobby(playingLobby.id, testUser2.id);
      await testUtils.updateLobbyStatus(playingLobby.id, "playing");

      // 2. Connexion du joueur
      const ws = new WebSocket(`ws://localhost:${server.address().port}/ws`, {
        headers: { "x-user-id": testUser2.id },
      });

      // Attendre la connexion
      await new Promise<void>((resolve, reject) => {
        ws.on("open", () => resolve());
        ws.on("error", reject);
        setTimeout(() => reject(new Error("Timeout connexion")), 3000);
      });

      // 3. D√©connexion brutale
      ws.terminate();

      // 4. Attendre le traitement asynchrone
      await new Promise((resolve) => setTimeout(resolve, 1500));

      // ‚úÖ Validation : statuts mis √† jour diff√©remment selon le type de lobby
      const waitingPlayerStatus = await testUtils.getPlayerStatus(
        waitingLobby.id,
        testUser2.id
      );
      const playingPlayerStatus = await testUtils.getPlayerStatus(
        playingLobby.id,
        testUser2.id
      );

      // Pour les lobbies en attente, le joueur est marqu√© comme d√©connect√©
      expect(waitingPlayerStatus).toBe("disconnected");

      // Pour les lobbies en cours, le comportement peut varier selon la logique m√©tier
      // (le joueur peut rester "playing" ou √™tre marqu√© "disconnected" selon l'impl√©mentation)
      expect(["playing", "disconnected"]).toContain(playingPlayerStatus);
    });

    it("devrait maintenir la coh√©rence des donn√©es lors de reconnexions rapides", async () => {
      // ‚úÖ Test de race conditions r√©elles

      const testLobby = await testUtils.createTestLobby(
        "rapid-reconnect-test",
        testUser1.id
      );

      // S√©quence de connexions/d√©connexions rapides
      for (let i = 0; i < 3; i++) {
        const ws = new WebSocket(`ws://localhost:${server.address().port}/ws`, {
          headers: { "x-user-id": testUser1.id },
        });

        await new Promise<void>((resolve, reject) => {
          let authenticated = false;

          ws.on("message", (data) => {
            const response = JSON.parse(data.toString());
            if (response.type === "authenticated") {
              authenticated = true;
              // D√©connexion imm√©diate apr√®s authentification
              setTimeout(() => {
                ws.terminate();
                resolve();
              }, 50);
            }
          });

          ws.on("error", () => resolve());

          setTimeout(() => {
            if (!authenticated) {
              ws.terminate();
              resolve();
            }
          }, 1000);
        });

        // Pause courte entre les reconnexions
        await new Promise((resolve) => setTimeout(resolve, 200));
      }

      // ‚úÖ Validation : donn√©es coh√©rentes apr√®s reconnexions rapides
      const lobbyAfter = await testUtils.findLobbyInDB(testLobby.id);
      expect(lobbyAfter?.status).toBe("waiting");
      expect(lobbyAfter?.hostId).toBe(testUser1.id);
    });
  });
});
