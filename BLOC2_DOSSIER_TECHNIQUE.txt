PAGE DE GARDE
====================

Projet : MapQuiz
Bloc 2 : Dossier Technique
Année universitaire : 2024-2025
Auteur : [À compléter]
Master 2 [Nom du Master à compléter]

--------------------

SOMMAIRE
====================
1. Introduction
2. Présentation du projet MapQuiz
3. Architecture technique
4. Fonctionnalités principales
5. Exemples de code et explications
6. Stratégie de tests et validation
7. Livrables attendus
8. Annexes

--------------------

1. INTRODUCTION
====================

Ce dossier technique présente le projet MapQuiz, développé dans le cadre du Bloc 2 du Master 2. L’objectif est de concevoir et développer une application logicielle complète, en respectant les exigences professionnelles de l’ingénierie logicielle : architecture, développement, validation, documentation et qualité. Ce document détaille les choix techniques, l’architecture, les fonctionnalités, ainsi que la démarche de validation et de documentation, afin de garantir la conformité aux attentes académiques et professionnelles. 


2. PRÉSENTATION DU PROJET MAPQUIZ
====================

2.1 Contexte et objectifs
--------------------
MapQuiz est une application web interactive visant à renforcer les connaissances géographiques des utilisateurs à travers des quiz ludiques et des modes multijoueurs. Le projet s’inscrit dans une démarche pédagogique, en proposant une expérience utilisateur moderne, accessible et collaborative.

Objectifs principaux :
- Offrir un outil d’apprentissage de la géographie basé sur le jeu.
- Permettre la compétition et la collaboration entre utilisateurs via un système d’amis et de lobbies multijoueurs.
- Garantir la sécurité, la performance et l’évolutivité de l’application.

2.2 Public cible
--------------------
- Étudiants et enseignants souhaitant dynamiser l’apprentissage de la géographie.
- Grand public amateur de quiz et de jeux éducatifs.
- Utilisateurs de tous âges grâce à une interface responsive et accessible.

2.3 Enjeux pédagogiques et techniques
--------------------
- Favoriser la mémorisation par la répétition et la compétition amicale.
- Proposer des modes de jeu variés (quiz, entraînement, multijoueur).
- Assurer la fiabilité des scores et la protection des données personnelles.
- Offrir une base technique robuste pour de futures évolutions (nouvelles cartes, modes de jeu, etc.). 


3. ARCHITECTURE TECHNIQUE
====================

3.1 Vue d’ensemble
--------------------
L’architecture de MapQuiz repose sur une séparation claire entre le frontend (interface utilisateur) et le backend (API, logique métier, base de données). Cette approche favorise la maintenabilité, l’évolutivité et la sécurité de l’application.

3.2 Stack technique
--------------------
- **Frontend** : React 19, Vite, Tailwind CSS, Shadcn UI, TanStack Router/Query
- **Backend** : Fastify (Node.js), Prisma ORM, TypeScript
- **Base de données** : PostgreSQL
- **Authentification** : Better Auth (OAuth Google)
- **Sécurité** : Helmet, CORS, Rate Limiting
- **Cartographie** : React Simple Maps, D3 Geo

3.3 Schéma d’architecture (texte)
--------------------

Utilisateur (navigateur)
    |
    |  (HTTP/HTTPS, WebSocket)
    v
Frontend React (Vite, TanStack Router)
    |
    |  (API REST, WebSocket)
    v
Backend Fastify (API, WebSocket, Auth, Prisma)
    |
    |  (requêtes SQL via Prisma)
    v
Base de données PostgreSQL

3.4 Choix techniques et justification
--------------------
- **Séparation frontend/backend** : facilite le développement parallèle et la scalabilité.
- **TypeScript** : robustesse et maintenabilité du code.
- **Prisma** : ORM moderne, migrations faciles, typage fort.
- **Fastify** : performance, plugins de sécurité natifs.
- **React** : composabilité, écosystème riche, expérience utilisateur moderne.
- **WebSocket** : gestion du temps réel pour le multijoueur.
- **Sécurité** : authentification OAuth, rate limiting, headers sécurisés. 


4. FONCTIONNALITÉS PRINCIPALES
====================

4.1 Quiz géographiques interactifs
--------------------
- Sélection de régions ou de pays à deviner sur une carte.
- Modes de jeu : quiz chronométré, entraînement libre.
- Affichage des scores, corrections et statistiques.

4.2 Système d’amis et multijoueur
--------------------
- Ajout, suppression et gestion des amis.
- Invitations et demandes d’amis.
- Création de lobbies multijoueurs pour jouer en temps réel avec d’autres utilisateurs.
- Classements et résultats partagés.

4.3 Authentification sécurisée
--------------------
- Connexion via Google OAuth (Better Auth).
- Gestion des sessions et des droits d’accès.

4.4 Gestion des scores et historique
--------------------
- Sauvegarde des scores individuels et multijoueurs.
- Historique des parties et statistiques personnelles.

4.5 Interface utilisateur moderne
--------------------
- Responsive design (desktop, tablette, mobile).
- Thème sombre/clair.
- Expérience utilisateur fluide et accessible.

4.6 Sécurité et confidentialité
--------------------
- Protection des données personnelles.
- Limitation du nombre de requêtes (rate limiting).
- Sécurisation des échanges via HTTPS et headers adaptés. 


5. EXEMPLES DE CODE ET EXPLICATIONS
====================

5.1 Exemple d’API backend (Fastify)
--------------------
```typescript
// src/server.ts
fastify.get("/health", async (request, reply) => {
  try {
    await prisma.$queryRaw`SELECT 1`;
    return {
      status: "ok",
      database: "connected",
      timestamp: new Date().toISOString(),
    };
  } catch (error) {
    reply.status(503).send({
      status: "error",
      database: "disconnected",
      timestamp: new Date().toISOString(),
    });
  }
});
```
*Ce code expose une route de vérification de santé de l’API, testant la connexion à la base de données.*

5.2 Exemple de modèle Prisma
--------------------
```prisma
model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  // ... autres champs et relations ...
}
```
*Le modèle User gère les utilisateurs, leurs informations et leurs relations (amis, scores, etc.).*

5.3 Exemple de composant React (frontend)
--------------------
```tsx
// src/components/game/common/Score.tsx
import React from "react";

type ScoreProps = {
  value: number;
  total: number;
};

export const Score: React.FC<ScoreProps> = ({ value, total }) => (
  <div className="score">
    Score : {value} / {total}
  </div>
);
```
*Ce composant affiche le score d’un utilisateur lors d’un quiz.* 


6. STRATÉGIE DE TESTS ET VALIDATION
====================

6.1 Tests unitaires et d’intégration
--------------------
- Mise en place de tests unitaires sur les fonctions critiques (validation des scores, logique de quiz, gestion des amis).
- Tests d’intégration pour vérifier le bon fonctionnement des routes API (ex : création d’un utilisateur, ajout d’un ami, sauvegarde d’un score).
- Utilisation de Prisma pour des tests sur une base de données isolée.

6.2 Tests manuels et validation fonctionnelle
--------------------
- Recettes fonctionnelles réalisées à partir de scénarios utilisateurs (connexion, jeu, ajout d’amis, multijoueur).
- Vérification de la conformité aux spécifications (ergonomie, sécurité, accessibilité).

6.3 Validation des livrables
--------------------
- Code revu et validé par l’équipe projet.
- Documentation technique relue et validée.
- Démonstration du projet devant un jury ou un public cible. 


7. LIVRABLES ATTENDUS
====================

- Code source complet (frontend et backend)
- Documentation technique détaillée (présent document)
- Scripts d’installation et de déploiement
- Schémas d’architecture et de base de données
- Scénarios de tests et rapports de validation
- Manuel utilisateur (en annexe) 


8. ANNEXES
====================

- Liens vers le dépôt GitHub du projet MapQuiz : [à compléter]
- Références techniques (Fastify, Prisma, React, etc.)
- Extraits de schémas ou captures d’écran de l’application (à insérer selon besoin)

---

Fin du dossier technique Bloc 2. 