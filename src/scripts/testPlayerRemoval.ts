import { prisma } from "../lib/database.js";
import { removePlayerFromLobby } from "../models/lobbyModel.js";
import { LobbyCleanupService } from "../services/lobby/lobbyCleanupService.js";
import { LobbyGameService } from "../services/lobby/lobbyGameService.js";

async function testPlayerRemoval() {
  console.log("üß™ Test de suppression de joueurs");
  console.log("================================\n");

  try {
    // 1. Cr√©er des utilisateurs de test
    console.log("1. Cr√©ation des utilisateurs de test...");
    const host = await prisma.user.upsert({
      where: { id: "test-host-removal" },
      update: {},
      create: {
        id: "test-host-removal",
        name: "H√¥te Test",
        email: "host@test.com",
        tag: "host_test",
        emailVerified: true,
        createdAt: new Date(),
        updatedAt: new Date(),
      },
    });

    const player1 = await prisma.user.upsert({
      where: { id: "test-player1-removal" },
      update: {},
      create: {
        id: "test-player1-removal",
        name: "Joueur 1",
        email: "player1@test.com",
        tag: "player1_test",
        emailVerified: true,
        createdAt: new Date(),
        updatedAt: new Date(),
      },
    });

    const player2 = await prisma.user.upsert({
      where: { id: "test-player2-removal" },
      update: {},
      create: {
        id: "test-player2-removal",
        name: "Joueur 2",
        email: "player2@test.com",
        tag: "player2_test",
        emailVerified: true,
        createdAt: new Date(),
        updatedAt: new Date(),
      },
    });

    console.log("‚úÖ Utilisateurs cr√©√©s");

    // 2. Cr√©er un lobby
    console.log("\n2. Cr√©ation du lobby...");
    const lobby = await prisma.gameLobby.create({
      data: {
        id: "550e8400-e29b-41d4-a716-446655440000", // UUID valide
        hostId: host.id,
        name: "Lobby Test Suppression",
        gameSettings: { selectedRegions: ["Europe"], gameMode: "quiz" },
        players: {
          create: [
            {
              userId: host.id,
              status: "joined",
            },
            {
              userId: player1.id,
              status: "joined",
            },
            {
              userId: player2.id,
              status: "joined",
            },
          ],
        },
      },
      include: {
        players: {
          include: {
            user: true,
          },
        },
      },
    });

    console.log(`‚úÖ Lobby cr√©√©: ${lobby.id}`);
    console.log(`  - H√¥te: ${host.name}`);
    console.log(`  - Joueurs: ${lobby.players.length}`);

    // 3. Test 1: √âtat initial
    console.log("\n--- Test 1: √âtat initial ---");
    const initialState = await LobbyGameService.getLobbyState(
      lobby.id,
      host.id
    );
    console.log("√âtat initial du lobby:");
    console.log(`  - Statut: ${initialState.status}`);
    console.log(`  - H√¥te: ${initialState.hostId}`);
    console.log(`  - Joueurs: ${initialState.players.length}`);
    for (const player of initialState.players) {
      console.log(`    - ${player.name}: ${player.status}`);
    }

    // 4. Test 2: Simulation d√©connexion d'un joueur
    console.log("\n--- Test 2: Simulation d√©connexion d'un joueur ---");
    await LobbyCleanupService.markPlayerAsDisconnected(player1.id, lobby.id);
    console.log(`‚úÖ Joueur ${player1.name} marqu√© comme d√©connect√©`);

    // 5. Test 3: V√©rification √©tat apr√®s d√©connexion
    console.log("\n--- Test 3: √âtat apr√®s d√©connexion ---");
    const stateAfterDisconnect = await LobbyGameService.getLobbyState(
      lobby.id,
      host.id
    );
    console.log("√âtat apr√®s d√©connexion:");
    console.log(`  - Statut: ${stateAfterDisconnect.status}`);
    console.log(`  - Joueurs: ${stateAfterDisconnect.players.length}`);
    for (const player of stateAfterDisconnect.players) {
      console.log(`    - ${player.name}: ${player.status}`);
    }

    // 6. Test 4: Simulation suppression d'un joueur connect√©
    console.log("\n--- Test 4: Suppression d'un joueur connect√© ---");
    await removePlayerFromLobby(lobby.id, player2.id);
    console.log(`‚úÖ Joueur ${player2.name} supprim√© du lobby`);

    // 7. Test 5: V√©rification √©tat apr√®s suppression
    console.log("\n--- Test 5: √âtat apr√®s suppression ---");
    const stateAfterRemoval = await LobbyGameService.getLobbyState(
      lobby.id,
      host.id
    );
    console.log("√âtat apr√®s suppression:");
    console.log(`  - Statut: ${stateAfterRemoval.status}`);
    console.log(`  - Joueurs: ${stateAfterRemoval.players.length}`);
    for (const player of stateAfterRemoval.players) {
      console.log(`    - ${player.name}: ${player.status}`);
    }

    // 8. Test 6: Simulation suppression d'un joueur d√©connect√©
    console.log("\n--- Test 6: Suppression d'un joueur d√©connect√© ---");
    await removePlayerFromLobby(lobby.id, player1.id);
    console.log(`‚úÖ Joueur d√©connect√© ${player1.name} supprim√© du lobby`);

    // 9. Test 7: V√©rification √©tat final
    console.log("\n--- Test 7: √âtat final ---");
    const finalState = await LobbyGameService.getLobbyState(lobby.id, host.id);
    console.log("√âtat final:");
    console.log(`  - Statut: ${finalState.status}`);
    console.log(`  - Joueurs: ${finalState.players.length}`);
    for (const player of finalState.players) {
      console.log(`    - ${player.name}: ${player.status}`);
    }

    // 10. Test 8: V√©rification que l'h√¥te ne peut pas se supprimer
    console.log("\n--- Test 8: Tentative de suppression de l'h√¥te ---");
    try {
      await removePlayerFromLobby(lobby.id, host.id);
      console.log(
        "‚ùå L'h√¥te a pu √™tre supprim√© (ce qui ne devrait pas arriver)"
      );
    } catch (error) {
      console.log("‚úÖ L'h√¥te ne peut pas √™tre supprim√© (comportement attendu)");
    }

    // 11. Nettoyage
    console.log("\n--- Nettoyage ---");
    await prisma.gameLobby.delete({
      where: { id: lobby.id },
    });
    await prisma.user.deleteMany({
      where: {
        id: {
          in: [host.id, player1.id, player2.id],
        },
      },
    });
    console.log("‚úÖ Donn√©es de test supprim√©es");

    console.log("\nüéâ Test de suppression de joueurs r√©ussi !");
    console.log("‚úÖ Les joueurs d√©connect√©s sont correctement affich√©s");
    console.log("‚úÖ L'h√¥te peut supprimer n'importe quel joueur");
    console.log("‚úÖ L'h√¥te ne peut pas se supprimer lui-m√™me");
    console.log("‚úÖ Le syst√®me de d√©connexion temporaire fonctionne");
  } catch (error) {
    console.error("‚ùå Erreur lors des tests:", error);
    throw error;
  }
}

// Ex√©cuter le test
testPlayerRemoval()
  .then(() => {
    console.log("\n‚úÖ Test termin√© avec succ√®s");
    process.exit(0);
  })
  .catch((error) => {
    console.error("\n‚ùå Test √©chou√©:", error);
    process.exit(1);
  });
