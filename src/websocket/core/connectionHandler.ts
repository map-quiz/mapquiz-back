import { WebSocket } from "@fastify/websocket";
import { APP_CONSTANTS } from "../../lib/config.js";
import * as LobbyModel from "../../models/lobbyModel.js";
import * as UserModel from "../../models/userModel.js";
import * as FriendService from "../../services/friendService.js";
import { LobbyCleanupService } from "../../services/lobby/lobbyCleanupService.js";
import { BroadcastManager } from "../lobby/broadcastManager.js";
import * as LobbyManager from "../lobby/lobbyManager.js";
import { sendSuccessResponse } from "./authentication.js";
import { addConnection, removeConnection } from "./connectionManager.js";

/**
 * Gestionnaire de connexions WebSocket
 */
export class WebSocketConnectionHandler {
  private static restoredUsers = new Set<string>(); // Cache pour √©viter les restaurations multiples
  private static recentlyDisconnectedUsers = new Set<string>(); // Cache pour √©viter les d√©connexions multiples
  /**
   * G√®re l'√©tablissement d'une nouvelle connexion
   */
  static handleNewConnection(socket: WebSocket): void {
    // console.log("Nouvelle connexion WebSocket √©tablie");

    // Confirmer la connexion
    sendSuccessResponse(
      socket,
      {
        message: "Connexion WebSocket √©tablie",
      },
      APP_CONSTANTS.WEBSOCKET_MESSAGES.CONNECTED
    );
  }

  /**
   * G√®re l'authentification d'un utilisateur
   */
  static async handleAuthentication(
    socket: WebSocket,
    userId: string,
    request: any
  ): Promise<void> {
    // Ajouter la connexion au gestionnaire
    addConnection(userId, socket);

    // Notifier les amis que l'utilisateur est en ligne
    await FriendService.notifyFriendsOfStatusChange(userId, true);

    // Restaurer l'utilisateur dans les lobbies o√π il √©tait
    await this.restoreUserInLobbies(userId);

    // Configurer les gestionnaires d'√©v√©nements de fermeture
    this.setupConnectionEventHandlers(socket, userId);

    // Envoyer la confirmation d'authentification
    sendSuccessResponse(
      socket,
      {
        userId: userId,
      },
      APP_CONSTANTS.WEBSOCKET_MESSAGES.AUTHENTICATED
    );
  }

  /**
   * Configure les gestionnaires d'√©v√©nements pour une connexion
   */
  private static setupConnectionEventHandlers(
    socket: WebSocket,
    userId: string
  ): void {
    // Gestionnaire de fermeture de connexion
    socket.on("close", (code: number, reason: Buffer) => {
      this.handleConnectionClose(userId, code, reason);
    });

    // Gestionnaire d'erreur de connexion
    socket.on("error", (error: Error) => {
      this.handleConnectionError(userId, error);
    });
  }

  /**
   * G√®re la fermeture d'une connexion
   */
  private static async handleConnectionClose(
    userId: string,
    code: number,
    reason: Buffer
  ): Promise<void> {
    removeConnection(userId);

    // Notifier les amis que l'utilisateur est hors ligne
    await FriendService.notifyFriendsOfStatusChange(userId, false);

    // Faire quitter le joueur des lobbies o√π il √©tait
    await this.handlePlayerDisconnect(userId);

    // console.log(
    //   `WebSocket ferm√© - Code: ${code}, Raison: ${reason.toString()}`
    // );
  }

  /**
   * G√®re une erreur de connexion
   */
  private static async handleConnectionError(
    userId: string,
    error: Error
  ): Promise<void> {
    removeConnection(userId);

    // Notifier les amis que l'utilisateur est hors ligne
    await FriendService.notifyFriendsOfStatusChange(userId, false);

    // Faire quitter le joueur des lobbies o√π il √©tait
    await this.handlePlayerDisconnect(userId);

    // console.error("Erreur WebSocket:", error);
  }

  /**
   * Restaure l'utilisateur dans les lobbies o√π il √©tait
   */
  private static async restoreUserInLobbies(userId: string): Promise<void> {
    // √âviter les restaurations multiples du m√™me utilisateur
    if (this.restoredUsers.has(userId)) {
      console.log(
        `Utilisateur ${userId} d√©j√† restaur√©, √©vitement de restauration multiple`
      );
      return;
    }

    try {
      // Marquer l'utilisateur comme en cours de restauration
      this.restoredUsers.add(userId);

      // Nettoyer le cache apr√®s 5 secondes pour permettre de nouvelles restaurations
      setTimeout(() => {
        this.restoredUsers.delete(userId);
      }, 5000);

      // Trouver tous les lobbies o√π l'utilisateur √©tait pr√©sent
      const userLobbies = await LobbyModel.getLobbiesByPlayer(userId);

      for (const lobby of userLobbies) {
        try {
          // V√©rifier si le lobby existe encore et est actif
          const lobbyInMemory = LobbyManager.getLobbyInMemory(lobby.id);
          if (!lobbyInMemory) {
            console.log(
              `Lobby ${lobby.id} non trouv√© en m√©moire, impossible de restaurer l'utilisateur`
            );
            continue; // Passer au lobby suivant au lieu de continuer
          }

          // V√©rifier que le lobby n'est pas termin√© ou supprim√©
          if (lobby.status === "finished" || lobby.status === "deleted") {
            console.log(
              `Lobby ${lobby.id} est termin√© ou supprim√© (statut: ${lobby.status}), impossible de restaurer l'utilisateur`
            );
            continue;
          }

          console.log(
            `Restauration de l'utilisateur ${userId} dans le lobby ${lobby.id}`
          );

          // R√©cup√©rer les informations de l'utilisateur
          const user = await UserModel.findUserById(userId);

          if (!user) {
            console.log(
              `Utilisateur ${userId} non trouv√©, impossible de le restaurer`
            );
            continue;
          }

          // Restaurer le joueur d√©connect√© en base de donn√©es
          await LobbyCleanupService.restoreDisconnectedPlayer(userId, lobby.id);

          // Mettre √† jour l'activit√© du lobby
          await LobbyCleanupService.updateLobbyActivity(lobby.id);

          // Marquer le joueur comme pr√©sent
          const player = await LobbyModel.getPlayerInLobby(lobby.id, userId);
          if (player) {
            // Restaurer l'utilisateur dans le lobby en m√©moire avec ses donn√©es compl√®tes
            if (!lobbyInMemory.players.has(userId)) {
              console.log(
                `Ajout de l'utilisateur ${userId} au lobby ${lobby.id} en m√©moire avec restauration des donn√©es`
              );

              // R√©cup√©rer les donn√©es compl√®tes du joueur depuis la base de donn√©es
              const playerData = await LobbyModel.getPlayerInLobby(
                lobby.id,
                userId
              );
              console.log(`üîç Restauration - Donn√©es r√©cup√©r√©es de la DB:`, {
                userId,
                status: playerData?.status,
                score: playerData?.score,
                progress: playerData?.progress,
              });

              if (playerData) {
                // Restaurer le joueur avec ses donn√©es compl√®tes
                lobbyInMemory.players.set(userId, {
                  name: user.name,
                  status: playerData.status || "joined",
                  score: playerData.score || 0,
                  progress: playerData.progress || 0,
                  validatedCountries: playerData.validatedCountries || [],
                  incorrectCountries: playerData.incorrectCountries || [],
                });

                console.log(
                  `‚úÖ Joueur ${userId} restaur√© avec statut: ${playerData.status}, score: ${playerData.score}, progress: ${playerData.progress}`
                );
              } else {
                // Si pas de donn√©es en DB, cr√©er un joueur par d√©faut sans diffuser
                console.log(
                  `Aucune donn√©e trouv√©e en DB pour ${userId}, cr√©ation d'un joueur par d√©faut`
                );
                lobbyInMemory.players.set(userId, {
                  name: user.name,
                  status: "joined",
                  score: 0,
                  progress: 0,
                  validatedCountries: [],
                  incorrectCountries: [],
                });
              }
            } else {
              console.log(
                `Utilisateur ${userId} d√©j√† pr√©sent dans le lobby ${lobby.id} en m√©moire`
              );
            }
          }

          // Diffuser la mise √† jour du lobby apr√®s restauration
          await BroadcastManager.broadcastLobbyUpdate(lobby.id, lobbyInMemory);
        } catch (error) {
          console.error(
            `Erreur lors de la restauration de l'utilisateur ${userId} dans le lobby ${lobby.id}:`,
            error
          );
        }
      }
    } catch (error) {
      console.error(
        `Erreur lors de la restauration de l'utilisateur ${userId}:`,
        error
      );
    }
  }

  /**
   * G√®re la d√©connexion d'un joueur des lobbies
   */
  private static async handlePlayerDisconnect(userId: string): Promise<void> {
    // √âviter les d√©connexions multiples rapides
    if (this.recentlyDisconnectedUsers.has(userId)) {
      console.log(
        `Joueur ${userId} d√©j√† marqu√© comme d√©connect√© r√©cemment, ignor√©`
      );
      return;
    }

    // Ajouter √† la liste des d√©connexions r√©centes
    this.recentlyDisconnectedUsers.add(userId);
    setTimeout(() => {
      this.recentlyDisconnectedUsers.delete(userId);
    }, 5000); // 5 secondes

    try {
      // Trouver tous les lobbies o√π le joueur √©tait pr√©sent
      const playerLobbies = await LobbyModel.getLobbiesByPlayer(userId);

      for (const lobby of playerLobbies) {
        try {
          // console.log(`Joueur ${userId} d√©connect√© du lobby ${lobby.id}`);

          // Marquer le joueur comme d√©connect√© en base de donn√©es
          await LobbyCleanupService.markPlayerAsDisconnected(userId, lobby.id);

          // Marquer le joueur comme d√©connect√© dans la m√©moire
          const lobbyInMemory = LobbyManager.getLobbyInMemory(lobby.id);
          if (lobbyInMemory && lobbyInMemory.players.has(userId)) {
            console.log(
              `Marquage du joueur ${userId} comme d√©connect√© dans le lobby ${lobby.id} en m√©moire`
            );
            // Le joueur reste en m√©moire mais est marqu√© comme d√©connect√©
            // Il sera restaur√© lors de la reconnexion
          }

          // console.log(
          //   `Joueur ${userId} marqu√© comme d√©connect√© du lobby ${lobby.id} (d√©connexion temporaire)`
          // );
        } catch (error) {
          console.error(
            `Erreur lors de la gestion de la d√©connexion du joueur ${userId} du lobby ${lobby.id}:`,
            error
          );
        }
      }
    } catch (error) {
      console.error(
        `Erreur lors de la gestion de la d√©connexion du joueur ${userId}:`,
        error
      );
    }
  }
}
